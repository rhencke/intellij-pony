package com.github.rhencke.intellij_pony.psi

import com.intellij.psi.tree.IElementType
import com.intellij.openapi.editor.DefaultLanguageHighlighterColors as Color

enum class PonyTokenTypes(color: PonyColor) {
    ACTOR(PonyColor.KEYWORD),
    ADDRESSOF(PonyColor.KEYWORD),
    AMPERSAND(PonyColor.OPERATION_SIGN),
    AND(PonyColor.KEYWORD),
    AS(PonyColor.KEYWORD),
    BE(PonyColor.KEYWORD),
    BLOCK_COMMENT(PonyColor.BLOCK_COMMENT),
    BOX(PonyColor.KEYWORD),
    BREAK(PonyColor.KEYWORD),
    BSLASH(PonyColor.OPERATION_SIGN),
    CARAT(PonyColor.OPERATION_SIGN),
    CINNAMONROLL(PonyColor.OPERATION_SIGN),
    CLASS(PonyColor.KEYWORD),
    COLON(PonyColor.OPERATION_SIGN),
    COMMA(PonyColor.OPERATION_SIGN),
    COMPILE_ERROR(PonyColor.KEYWORD),
    COMPILE_INTRINSIC(PonyColor.KEYWORD),
    CONSUME(PonyColor.KEYWORD),
    CONTINUE(PonyColor.KEYWORD),
    DIGESTOF(PonyColor.KEYWORD),
    DO(PonyColor.KEYWORD),
    DOT(PonyColor.DOT),
    DOT_DOT_DOT(PonyColor.DOT),
    DOT_GT(PonyColor.OPERATION_SIGN),
    ELSE(PonyColor.KEYWORD),
    ELSEIF(PonyColor.KEYWORD),
    EMBED(PonyColor.KEYWORD),
    END(PonyColor.KEYWORD),
    EQ(PonyColor.OPERATION_SIGN),
    EQ_EQ(PonyColor.OPERATION_SIGN),
    EQ_EQ_TILDE(PonyColor.OPERATION_SIGN),
    ERROR(PonyColor.KEYWORD),
    EXCL(PonyColor.OPERATION_SIGN),
    EXCL_EQ(PonyColor.OPERATION_SIGN),
    EXCL_EQ_TILDE(PonyColor.OPERATION_SIGN),
    FALSE(PonyColor.PREDEFINED_SYMBOL),
    FLOAT(PonyColor.NUMBER),
    FOR(PonyColor.KEYWORD),
    FSLASH(PonyColor.OPERATION_SIGN),
    FSLASH_TILDE(PonyColor.OPERATION_SIGN),
    FUN(PonyColor.KEYWORD),
    GT(PonyColor.OPERATION_SIGN),
    GT_EQ(PonyColor.OPERATION_SIGN),
    GT_EQ_TILDE(PonyColor.OPERATION_SIGN),
    GT_GT(PonyColor.OPERATION_SIGN),
    GT_GT_TILDE(PonyColor.OPERATION_SIGN),
    GT_TILDE(PonyColor.OPERATION_SIGN),
    ID(PonyColor.IDENTIFIER),
    IF(PonyColor.KEYWORD),
    IFDEF(PonyColor.KEYWORD),
    IN(PonyColor.KEYWORD),
    INT(PonyColor.NUMBER),
    INTERFACE(PonyColor.KEYWORD),
    IS(PonyColor.KEYWORD),
    ISNT(PonyColor.KEYWORD),
    ISO(PonyColor.KEYWORD),
    LAMBDA(PonyColor.KEYWORD),
    LBRAK(PonyColor.BRACKETS),
    LCURLY(PonyColor.BRACES),
    LET(PonyColor.KEYWORD),
    LINE_COMMENT(PonyColor.LINE_COMMENT),
    LOC(PonyColor.KEYWORD),
    LPAREN(PonyColor.PARENTHESES),
    LPAREN_NEW(PonyColor.PARENTHESES),
    LSQUARE_NEW(PonyColor.BRACKETS),
    LT(PonyColor.OPERATION_SIGN),
    LT_EQ(PonyColor.OPERATION_SIGN),
    LT_EQ_TILDE(PonyColor.OPERATION_SIGN),
    LT_LT(PonyColor.OPERATION_SIGN),
    LT_LT_TILDE(PonyColor.OPERATION_SIGN),
    LT_TILDE(PonyColor.OPERATION_SIGN),
    MATCH(PonyColor.KEYWORD),
    MINUS(PonyColor.OPERATION_SIGN),
    MINUS_NEW(PonyColor.OPERATION_SIGN),
    MINUS_TILDE(PonyColor.OPERATION_SIGN),
    MINUS_TILDE_NEW(PonyColor.OPERATION_SIGN),
    NEW(PonyColor.KEYWORD),
    NOT(PonyColor.KEYWORD),
    OBJECT(PonyColor.KEYWORD),
    OR(PonyColor.KEYWORD),
    PERCENT(PonyColor.OPERATION_SIGN),
    PERCENT_TILDE(PonyColor.OPERATION_SIGN),
    PIPE(PonyColor.OPERATION_SIGN),
    PLUS(PonyColor.OPERATION_SIGN),
    PLUS_TILDE(PonyColor.OPERATION_SIGN),
    POUND(PonyColor.OPERATION_SIGN),
    POUND_ALIAS(PonyColor.KEYWORD),
    POUND_ANY(PonyColor.KEYWORD),
    POUND_READ(PonyColor.KEYWORD),
    POUND_SEND(PonyColor.KEYWORD),
    POUND_SHARE(PonyColor.KEYWORD),
    PRIMITIVE(PonyColor.KEYWORD),
    RBRAK(PonyColor.BRACKETS),
    RCURLY(PonyColor.BRACES),
    RECOVER(PonyColor.KEYWORD),
    REF(PonyColor.KEYWORD),
    REPEAT(PonyColor.KEYWORD),
    RETURN(PonyColor.KEYWORD),
    RPAREN(PonyColor.PARENTHESES),
    SEMI(PonyColor.SEMICOLON),
    STAR(PonyColor.OPERATION_SIGN),
    STAR_TILDE(PonyColor.OPERATION_SIGN),
    STRING(PonyColor.STRING),
    STRONG_ROCKET(PonyColor.OPERATION_SIGN),
    STRUCT(PonyColor.KEYWORD),
    TAG(PonyColor.KEYWORD),
    THEN(PonyColor.KEYWORD),
    THIS(PonyColor.PREDEFINED_SYMBOL),
    TILDE(PonyColor.OPERATION_SIGN),
    TRAIT(PonyColor.KEYWORD),
    TRN(PonyColor.KEYWORD),
    TRUE(PonyColor.PREDEFINED_SYMBOL),
    TRY(PonyColor.KEYWORD),
    TYPE(PonyColor.KEYWORD),
    UNTIL(PonyColor.KEYWORD),
    USE(PonyColor.KEYWORD),
    VAL(PonyColor.KEYWORD),
    VAR(PonyColor.KEYWORD),
    WAT(PonyColor.OPERATION_SIGN),
    WEAK_ROCKET(PonyColor.OPERATION_SIGN),
    WHERE(PonyColor.KEYWORD),
    WHILE(PonyColor.KEYWORD),
    WITH(PonyColor.KEYWORD),
    XOR(PonyColor.OPERATION_SIGN);

    val element: IElementType = PonyTokenType(name, color)
}