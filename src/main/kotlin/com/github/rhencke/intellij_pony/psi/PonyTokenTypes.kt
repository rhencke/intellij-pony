package com.github.rhencke.intellij_pony.psi

import com.intellij.openapi.editor.DefaultLanguageHighlighterColors as Color
import com.intellij.openapi.editor.colors.TextAttributesKey
import com.intellij.psi.tree.IElementType

enum class PonyTokenTypes(fallbackType: TextAttributesKey? = null) {
    ACTOR(Color.KEYWORD),
    ADDRESSOF(Color.KEYWORD),
    AMPERSAND(Color.OPERATION_SIGN),
    AND(Color.KEYWORD),
    AS(Color.KEYWORD),
    BE(Color.KEYWORD),
    BLOCK_COMMENT(Color.BLOCK_COMMENT),
    BOX(Color.KEYWORD),
    BREAK(Color.KEYWORD),
    BSLASH(Color.OPERATION_SIGN),
    CARAT(Color.OPERATION_SIGN),
    CINNAMONROLL(Color.OPERATION_SIGN),
    CLASS(Color.KEYWORD),
    COLON(Color.OPERATION_SIGN),
    COMMA(Color.OPERATION_SIGN),
    COMPILE_ERROR(Color.KEYWORD),
    COMPILE_INTRINSIC(Color.KEYWORD),
    CONSUME(Color.KEYWORD),
    CONTINUE(Color.KEYWORD),
    DIGESTOF(Color.KEYWORD),
    DO(Color.KEYWORD),
    DOT(Color.DOT),
    DOT_DOT_DOT(),
    DOT_GT(Color.OPERATION_SIGN),
    ELSE(Color.KEYWORD),
    ELSEIF(Color.KEYWORD),
    EMBED(Color.KEYWORD),
    END(Color.KEYWORD),
    EQ(Color.OPERATION_SIGN),
    EQ_EQ(Color.OPERATION_SIGN),
    EQ_EQ_TILDE(Color.OPERATION_SIGN),
    ERROR(Color.KEYWORD),
    EXCL(Color.OPERATION_SIGN),
    EXCL_EQ(Color.OPERATION_SIGN),
    EXCL_EQ_TILDE(Color.OPERATION_SIGN),
    FALSE(Color.PREDEFINED_SYMBOL),
    FLOAT(Color.NUMBER),
    FOR(Color.KEYWORD),
    FSLASH(Color.OPERATION_SIGN),
    FSLASH_TILDE(Color.OPERATION_SIGN),
    FUN(Color.KEYWORD),
    GT(Color.OPERATION_SIGN),
    GT_EQ(Color.OPERATION_SIGN),
    GT_EQ_TILDE(Color.OPERATION_SIGN),
    GT_GT(Color.OPERATION_SIGN),
    GT_GT_TILDE(Color.OPERATION_SIGN),
    GT_TILDE(Color.OPERATION_SIGN),
    ID(Color.IDENTIFIER),
    IF(Color.KEYWORD),
    IFDEF(Color.KEYWORD),
    IN(Color.KEYWORD),
    INT(Color.NUMBER),
    INTERFACE(Color.KEYWORD),
    IS(Color.KEYWORD),
    ISNT(Color.KEYWORD),
    ISO(Color.KEYWORD),
    LAMBDA(Color.KEYWORD),
    LBRAK(Color.BRACKETS),
    LCURLY(Color.BRACES),
    LET(Color.KEYWORD),
    LINE_COMMENT(Color.LINE_COMMENT),
    LOC(Color.KEYWORD),
    LPAREN(Color.PARENTHESES),
    LPAREN_NEW(Color.PARENTHESES),
    LSQUARE_NEW(Color.BRACKETS),
    LT(Color.OPERATION_SIGN),
    LT_EQ(Color.OPERATION_SIGN),
    LT_EQ_TILDE(Color.OPERATION_SIGN),
    LT_LT(Color.OPERATION_SIGN),
    LT_LT_TILDE(Color.OPERATION_SIGN),
    LT_TILDE(Color.OPERATION_SIGN),
    MATCH(Color.KEYWORD),
    MINUS(Color.OPERATION_SIGN),
    MINUS_NEW(Color.OPERATION_SIGN),
    MINUS_TILDE(Color.OPERATION_SIGN),
    MINUS_TILDE_NEW(Color.OPERATION_SIGN),
    NEW(Color.KEYWORD),
    NOT(Color.KEYWORD),
    OBJECT(Color.KEYWORD),
    OR(Color.KEYWORD),
    PERCENT(Color.OPERATION_SIGN),
    PERCENT_TILDE(Color.OPERATION_SIGN),
    PIPE(Color.OPERATION_SIGN),
    PLUS(Color.OPERATION_SIGN),
    PLUS_TILDE(Color.OPERATION_SIGN),
    POUND(Color.OPERATION_SIGN),
    POUND_ALIAS(Color.KEYWORD),
    POUND_ANY(Color.KEYWORD),
    POUND_READ(Color.KEYWORD),
    POUND_SEND(Color.KEYWORD),
    POUND_SHARE(Color.KEYWORD),
    PRIMITIVE(Color.KEYWORD),
    RBRAK(Color.BRACKETS),
    RCURLY(Color.BRACES),
    RECOVER(Color.KEYWORD),
    REF(Color.KEYWORD),
    REPEAT(Color.KEYWORD),
    RETURN(Color.KEYWORD),
    RPAREN(Color.PARENTHESES),
    SEMI(Color.SEMICOLON),
    STAR(Color.OPERATION_SIGN),
    STAR_TILDE(Color.OPERATION_SIGN),
    STRING(Color.STRING),
    STRONG_ROCKET(Color.OPERATION_SIGN),
    STRUCT(Color.KEYWORD),
    TAG(Color.KEYWORD),
    THEN(Color.KEYWORD),
    THIS(Color.PREDEFINED_SYMBOL),
    TILDE(Color.OPERATION_SIGN),
    TRAIT(Color.KEYWORD),
    TRN(Color.KEYWORD),
    TRUE(Color.PREDEFINED_SYMBOL),
    TRY(Color.KEYWORD),
    TYPE(Color.KEYWORD),
    UNTIL(Color.KEYWORD),
    USE(Color.KEYWORD),
    VAL(Color.KEYWORD),
    VAR(Color.KEYWORD),
    WAT(Color.OPERATION_SIGN),
    WEAK_ROCKET(Color.OPERATION_SIGN),
    WHERE(Color.KEYWORD),
    WHILE(Color.KEYWORD),
    WITH(Color.KEYWORD),
    XOR(Color.OPERATION_SIGN);

    val element: IElementType = PonyTokenType(name, fallbackType)
}